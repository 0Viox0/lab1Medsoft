import { Injectable } from "@nestjs/common";
import { PatientsService } from "../patients/patients.service";
import path from "path";
import dotenv from "dotenv";
import { HL7Message, HL7Segment, HL7Version } from "hl7v2";
import { v4 as uuidv4 } from "uuid";

@Injectable()
export class HL7Service {
  private cachedPatients: any[] = [];
  constructor(private readonly patients: PatientsService) {
    const envPath = path.resolve(process.cwd(), ".env");
    dotenv.config({ path: envPath });
    this.refreshCache();
    setInterval(() => this.refreshCache(), 5000);
  }

  private async refreshCache() {
    try {
      this.cachedPatients = await this.patients.last10();
      console.log("‚ôªÔ∏è [Hospital] –ö–µ—à –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω:", this.cachedPatients.length);
    } catch (err) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:", err);
    }
  }

  private getCachedPatients() {
    return this.cachedPatients;
  }

  // üì• –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–µ–≥–æ HL7
  parseHL7Text(message: string): HL7Message {
    try {
      console.log("üì© [Hospital] –ü–æ–ª—É—á–µ–Ω–æ HL7 —Å–æ–æ–±—â–µ–Ω–∏–µ:\n", message.replace(/\r/g, "\n"));
      const parsed = HL7Message.parse(message);
      return parsed;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HL7:", err);
      throw new Error("Invalid HL7 message");
    }
  }

  // üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  async processHL7(parsed: HL7Message) {
    const msh = parsed.getSegment("MSH");
    const pid = parsed.getSegment("PID");
    console.log("üìã [Hospital] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HL7 —Å–æ–æ–±—â–µ–Ω–∏—è...");

    const messageType = msh?.field(8)?.getValue()?.toString().split("^")[0];
    const triggerEvent = msh?.field(8)?.getValue()?.toString().split("^")[1];
    console.log(`‚û°Ô∏è –¢–∏–ø: ${messageType}, –°–æ–±—ã—Ç–∏–µ: ${triggerEvent}`);

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ QBP^Q22 (GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤) ---
    if (messageType === "QBP" && triggerEvent === "Q22") {
      console.log("üü¶ [Hospital] –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...");

      const patients = this.getCachedPatients();
      console.log("‚úÖ [Hospital] –ü–∞—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:", patients);

      // –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ª–æ–≥–∏–º –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É
      if (!patients || patients.length === 0) {
        console.warn("‚ö†Ô∏è [Hospital] –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.");
        const dummy = {
          id: "TEST123",
          firstName: "John",
          lastName: "Doe",
          birthDate: "19800101",
        };
        return this.buildHL7Response(parsed, [dummy]);
      }

      return this.buildHL7Response(parsed, patients);
    }

    // --- –ï—Å–ª–∏ PID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ ACK ---
    if (!pid) {
      console.log("‚ö†Ô∏è PID —Å–µ–≥–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π ACK");
      return this.buildHL7Response(parsed, []);
    }

    // --- –ü–∞—Ä—Å–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ ---
    const id = pid.field(3).getValue().toString();
    if (messageType === "ADT" && triggerEvent === "A03"){
      await this.patients.deleteById(id);
      return this.buildHL7Response(parsed, []);
    }
    const [lastName, firstName] = pid.field(5)?.getValue()?.toString().split("^");
    const birthDate = pid.field(7)?.getValue()?.toString() || "";


    // --- –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ ---
    const actionField = pid.field(pid.fields.length);
    const action = actionField?.getValue()?.toUpperCase() || "";

    console.log(`üß© –ü–∞—Ü–∏–µ–Ω—Ç: ID=${id}, ${lastName} ${firstName}, DOB=${birthDate}, Action=${action}`);

    // --- CREATE ---
    if (action === "CREATE" || (messageType === "ADT" && triggerEvent === "A01")) {
      console.log("üü¢ [Hospital] –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞...");
      await this.patients.createFromHL7({ id, firstName, lastName, birthDate, raw: parsed.toHL7String() });
      return this.buildHL7Response(parsed, []);
    }

    // --- DELETE ---
    if (action === "DELETE" || (messageType === "ADT" && triggerEvent === "A03")) {
      console.log("üî¥ [Hospital] –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞...");
      await this.patients.deleteById(id);
      return this.buildHL7Response(parsed, []);
    }

    console.log("‚ö™ [Hospital] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ACK");
    return this.buildHL7Response(parsed, []);
  }

  // üèóÔ∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HL7-–æ—Ç–≤–µ—Ç–∞
  buildHL7Response(originalMessage: HL7Message, patients: any[] = []): string {
    console.log("üèóÔ∏è [Hospital] –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ HL7-–æ—Ç–≤–µ—Ç–∞...");
    const response = new HL7Message(HL7Version.v2_5);
    const msh = new HL7Segment(response, "MSH");
    const timestamp = new Date().toISOString().replace(/[-:T.Z]/g, "").slice(0, 14);
    const originalMSH = originalMessage.getSegment("MSH");

    // --- MSH ---
    msh.field(1).setValue("|");
    msh.field(2).setValue("^~\\&");
    msh.field(3).setValue("HospitalSystem");
    msh.field(4).setValue("Main");
    msh.field(5).setValue(originalMSH?.field(3).toString() || "Reception");
    msh.field(6).setValue(originalMSH?.field(4).toString() || "FrontDesk");
    msh.field(7).setValue(timestamp);
    msh.field(9).setValue("RSP^K22");
    msh.field(10).setValue(uuidv4());
    msh.field(11).setValue("P");
    msh.field(12).setValue("2.5");

    // --- MSA ---
    const msa = new HL7Segment(response, "MSA");
    msa.field(1).setValue("AA");
    msa.field(2).setValue(originalMSH?.field(10).toString() || "");

    const segments = [msh.toHL7String(), msa.toHL7String()];
    patients = this.cachedPatients
    // --- PID ---
    if (patients.length > 0) {
      console.log(`üßæ [Hospital] –î–æ–±–∞–≤–ª—è–µ–º ${patients.length} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ HL7-–æ—Ç–≤–µ—Ç...`);
      patients = this.cachedPatients
      patients.forEach((patient, index) => {
        const pid = new HL7Segment(response, "PID");
        pid.field(1).setValue((index + 1).toString());
        pid.field(3).setValue(patient.id);
        pid.field(5).setValue(`${patient.lastName || ""}^${patient.firstName || ""}`);
        pid.field(7).setValue(this.hl7Date(patient.birthDate));
        segments.push(pid.toHL7String());
      });
    } else {
      console.warn("‚ö†Ô∏è [Hospital] –ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ buildHL7Response!");
      console.warn(patients.length)
    }

    const hl7Response = segments.join("\r") + "\r";
    console.log("üì§ [Hospital] HL7 –æ—Ç–≤–µ—Ç (–≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ):\n", hl7Response.replace(/\r/g, "\n"));
    return hl7Response;
  }

  hl7Date(date: string | Date): string {
    if (!date) return "";
    const d = new Date(date);
    const y = d.getFullYear();
    const m = String(d.getMonth() + 1).padStart(2, "0");
    const day = String(d.getDate()).padStart(2, "0");
    const h = String(d.getHours()).padStart(2, "0");
    const min = String(d.getMinutes()).padStart(2, "0");
    const s = String(d.getSeconds()).padStart(2, "0");
    return `${y}${m}${day}${h}${min}${s}`;
  }

}
