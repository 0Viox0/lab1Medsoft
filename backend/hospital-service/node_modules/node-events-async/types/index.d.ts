import { EventEmitter } from 'events';
export type DefaultEventMap = [never];
export type EventMap<T> = Record<keyof T, any[]> | DefaultEventMap;
type Key<K, T> = T extends DefaultEventMap ? string | symbol : K | keyof T;
type AnyRest = [...args: any[]];
type Args<K, T> = T extends DefaultEventMap ? AnyRest : K extends keyof T ? T[K] : never;
export declare class AsyncEventEmitter<T extends EventMap<T> = DefaultEventMap> extends EventEmitter<T> {
    constructor();
    /**
     * Asynchronously calls each of the listeners registered for the event named `eventName`,
     * in the order they were registered, passing the supplied arguments to each.
     * @param event
     * @param args
     */
    emitAsync<K>(event: Key<K, T>, ...args: Args<K, T>): Promise<boolean>;
    /**
     * In a serial order, asynchronously calls each of the listeners registered for the event named `eventName`,
     * in the order they were registered, passing the supplied arguments to each.
     * @param event
     * @param args
     */
    emitAsyncSerial<K>(event: Key<K, T>, ...args: Args<K, T>): Promise<boolean>;
}
export {};
