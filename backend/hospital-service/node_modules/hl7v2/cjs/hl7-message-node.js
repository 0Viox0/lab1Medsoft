"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HL7MessageNode = void 0;
const hl7_segment_js_1 = require("./hl7-segment.js");
class HL7MessageNode {
    constructor(name) {
        this.name = '';
        this.items = [];
        this.name = name;
    }
    /**
     * Searches for a segment of a given type
     */
    getSegment(segmentType, indexOrAfter) {
        let k = 0;
        for (let i = 0; i < this.items.length; i++) {
            const seg = this.items[i];
            if (seg instanceof hl7_segment_js_1.HL7Segment && seg.segmentType === segmentType) {
                if (!indexOrAfter)
                    return seg;
                if (typeof indexOrAfter === 'number') {
                    if (indexOrAfter === k++)
                        return seg;
                }
                else {
                    if (indexOrAfter === seg)
                        indexOrAfter = undefined;
                }
            }
        }
    }
    /**
     * Searches for a segment of a given type in reverse order
     */
    getSegmentFromLast(segmentType, indexOrAfter) {
        let k = 0;
        for (let i = this.items.length - 1; i >= 0; i--) {
            const seg = this.items[i];
            if (seg instanceof hl7_segment_js_1.HL7Segment && seg.segmentType === segmentType) {
                if (!indexOrAfter)
                    return seg;
                if (typeof indexOrAfter === 'number') {
                    if (indexOrAfter === k++)
                        return seg;
                }
                else {
                    if (indexOrAfter === seg)
                        indexOrAfter = undefined;
                }
            }
        }
    }
    /**
     * Searches for a node of a given name
     */
    getNode(nodeName, indexOrAfter) {
        let k = 0;
        for (let i = 0; i < this.items.length; i++) {
            const node = this.items[i];
            if (node instanceof HL7MessageNode && node.name === nodeName) {
                if (!indexOrAfter)
                    return node;
                if (typeof indexOrAfter === 'number') {
                    if (indexOrAfter === k++)
                        return node;
                }
                else {
                    if (indexOrAfter === node)
                        indexOrAfter = undefined;
                }
            }
        }
    }
    /**
     * Searches for a node of a given name in reverse order
     */
    getNodeFromLast(nodeName, indexOrAfter) {
        let k = 0;
        for (let i = this.items.length - 1; i >= 0; i--) {
            const node = this.items[i];
            if (node instanceof HL7MessageNode && node.name === nodeName) {
                if (!indexOrAfter)
                    return node;
                if (typeof indexOrAfter === 'number') {
                    if (indexOrAfter === k++)
                        return node;
                }
                else {
                    if (indexOrAfter === node)
                        indexOrAfter = undefined;
                }
            }
        }
    }
}
exports.HL7MessageNode = HL7MessageNode;
