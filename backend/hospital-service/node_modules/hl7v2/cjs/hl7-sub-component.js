"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hl7SubComponent = void 0;
const hl7v2_dictionary_1 = require("hl7v2-dictionary");
const hl7_error_js_1 = require("./hl7-error.js");
const hl7_escape_js_1 = require("./utils/hl7-escape.js");
class Hl7SubComponent {
    constructor(component, position, def) {
        this.component = component;
        this.position = position;
        this._definition = def;
        this._typeDef = this.field.message.dictionary.types[this._definition.type];
        if (!this._typeDef)
            /* c8 ignore next */
            throw new Error(`Unknown data type: ${this._definition.type}`);
    }
    get message() {
        return this.field.message;
    }
    get segment() {
        return this.field.segment;
    }
    get field() {
        return this.component.field;
    }
    get definition() {
        return this._definition;
    }
    get typeDef() {
        return this._typeDef;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        const decode = this.definition.decode || this.typeDef.decode;
        this._value = decode && value != null ? decode(value) : value;
    }
    isEmpty() {
        return this._value == null;
    }
    fromHL7String(value, options) {
        this._value = undefined;
        if (!value)
            return;
        const unescaped = (0, hl7_escape_js_1.hl7UnEscape)(value, this.field.message);
        try {
            if (Buffer.isBuffer(unescaped) || unescaped == null)
                this.value = unescaped;
            else {
                const decode = this.definition.decode || this.typeDef.decode;
                this.value = decode ? decode(unescaped) : unescaped;
            }
        }
        catch (e) {
            if (!options?.strict) {
                this._value = unescaped;
                return;
            }
            const location = `${this.segment.segmentType}.${this.field.position}.${this.component.position}.${this.position}[${this.component.repetition.index}]`;
            let segmentIndex = this.segment.index;
            if (segmentIndex < 0)
                segmentIndex = this.message.segments.length;
            throw new hl7_error_js_1.HL7Error(`The field (${location}) contained data of the wrong data type. ${e.message}.`, {
                segmentType: this.segment.segmentType,
                segmentSequence: segmentIndex,
                fieldPosition: this.field.position,
                componentPosition: this.component.position,
                subComponentPosition: this.position,
                repetitionIndex: this.component.repetition.index,
                hl7ErrorCode: 102,
            });
        }
    }
    toHL7String(options) {
        const encode = this.definition.encode || this.typeDef.encode;
        let v = this.value;
        if (v === null)
            return '""';
        if (v === undefined)
            return '';
        if (encode) {
            try {
                v = encode(v);
            }
            catch {
                v = v == null ? v : String(v);
            }
        }
        else {
            if (typeof v === 'object' && v instanceof Date)
                v = (0, hl7v2_dictionary_1.toHL7DateTime)(v);
        }
        const str = (0, hl7_escape_js_1.hl7Escape)(v, this.field.message);
        if (options?.serializeSubComponent)
            return String(options?.serializeSubComponent(this, str, options) || '');
        return str;
    }
    [Symbol.toStringTag]() {
        return this.toHL7String();
    }
}
exports.Hl7SubComponent = Hl7SubComponent;
