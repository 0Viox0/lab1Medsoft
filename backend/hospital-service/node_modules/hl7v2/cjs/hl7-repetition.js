"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HL7Repetition = void 0;
const hl7_component_js_1 = require("./hl7-component.js");
class HL7Repetition {
    constructor(field) {
        this.field = field;
        this.clear();
    }
    get message() {
        return this.field.message;
    }
    get segment() {
        return this.field.segment;
    }
    get components() {
        return this._components;
    }
    get index() {
        return this.field.repetitions.indexOf(this);
    }
    clear() {
        this._components = [];
    }
    isEmpty() {
        for (const component of this._components) {
            if (!component.isEmpty())
                return false;
        }
        return true;
    }
    /**
     *
     */
    component(position = 1) {
        if (position < 1)
            throw new Error('Invalid component position');
        let component = this._components[position - 1];
        if (!component) {
            let fDef = this.field.typeDef.fields?.[String(position - 1)];
            if (!fDef) {
                if (position === 1)
                    fDef = this.field.definition;
                else
                    fDef = {
                        type: 'ST',
                    };
            }
            component = new hl7_component_js_1.Hl7Component(this, position, fDef);
            this._components[position - 1] = component;
        }
        return component;
    }
    subComponent(componentPos, subComponentPos) {
        return this.comp(componentPos).subcomp(subComponentPos);
    }
    /**
     * Alias of .component()
     */
    comp(position) {
        return this.component(position);
    }
    /**
     * Alias of .subComponent()
     */
    subcomp(componentPos, subComponentPos) {
        return this.subComponent(componentPos, subComponentPos);
    }
    getValue(component, subComponent) {
        return this._components[(component || 1) - 1]?.getValue(subComponent);
    }
    setValue(value, component, subComponent) {
        this.comp(component ?? 1).setValue(value, subComponent);
        return this;
    }
    fromHL7String(value, options) {
        this._components = [];
        const items = value.split(this.field.message.componentSeparator);
        for (const s of items) {
            this.comp(this._components.length + 1).fromHL7String(s, options);
        }
    }
    toHL7String(options) {
        const { componentSeparator } = this.segment.message;
        let str = this._components
            .map(component => component.toHL7String(options))
            .join(componentSeparator);
        while (str.endsWith(componentSeparator))
            str = str.substring(0, str.length - 1);
        return str;
    }
    [Symbol.toStringTag]() {
        return this.toHL7String();
    }
}
exports.HL7Repetition = HL7Repetition;
