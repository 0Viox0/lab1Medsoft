"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hl7Component = void 0;
const hl7v2_dictionary_1 = require("hl7v2-dictionary");
const hl7_error_js_1 = require("./hl7-error.js");
const hl7_sub_component_js_1 = require("./hl7-sub-component.js");
const hl7_escape_js_1 = require("./utils/hl7-escape.js");
class Hl7Component {
    constructor(repetition, position, def) {
        this.repetition = repetition;
        this.position = position;
        this._definition = def;
        this._typeDef = this.message.dictionary.types[this._definition.type];
        if (!this._typeDef)
            throw new Error(`Unknown data type: ${this._definition.type}`);
        if (this.isPrimitive) {
            this._data = new hl7_sub_component_js_1.Hl7SubComponent(this, 1, this.definition);
        }
        this.clear();
    }
    get message() {
        return this.field.message;
    }
    get segment() {
        return this.field.segment;
    }
    get field() {
        return this.repetition.field;
    }
    get definition() {
        return this._definition;
    }
    get typeDef() {
        return this._typeDef;
    }
    get isPrimitive() {
        return !this.typeDef.fields;
    }
    get subComponents() {
        return this._subComponents;
    }
    clear() {
        if (this.field.isPrimitive) {
            this._data.value = undefined;
        }
        else
            this._subComponents = [];
    }
    isEmpty() {
        if (this._data)
            return this._data.value == null;
        if (this._subComponents) {
            for (const sub of this._subComponents) {
                if (!sub.isEmpty())
                    return false;
            }
        }
        return true;
    }
    subcomp(position) {
        if (this.field.isPrimitive)
            throw new Error('Primitive fields have no sub-component');
        if (position < 1)
            throw new Error('Invalid sub-component position');
        let subComponent = this._subComponents[position - 1];
        if (!subComponent) {
            let fDef = this.typeDef.fields?.[String(position)];
            if (!fDef) {
                if (position === 1)
                    fDef = this.definition;
                else
                    fDef = {
                        type: 'ST',
                    };
            }
            subComponent = new hl7_sub_component_js_1.Hl7SubComponent(this, position, fDef);
            this._subComponents[position - 1] = subComponent;
        }
        return subComponent;
    }
    getValue(subComponent) {
        if (this._data)
            return subComponent && subComponent > 1 ? undefined : this._data.value;
        return this._subComponents[(subComponent ?? 1) - 1]?.value;
    }
    setValue(value, subComponent) {
        if (subComponent || !this._data) {
            this.subcomp(subComponent || 1).value = value;
            return this;
        }
        this._data.value = value;
        return this;
    }
    fromHL7String(value, options) {
        if (value === '') {
            this.setValue(undefined);
            return;
        }
        if (this._data) {
            const decode = this.definition.decode || this.typeDef.decode;
            const unescaped = (0, hl7_escape_js_1.hl7UnEscape)(value, this.field.message);
            try {
                if (Buffer.isBuffer(unescaped) || unescaped == null)
                    this._data._value = unescaped;
                else
                    this._data._value = decode ? decode(unescaped) : unescaped;
            }
            catch (e) {
                if (!options?.strict) {
                    this._data._value = unescaped;
                    return;
                }
                const location = `${this.segment.segmentType}.${this.field.position}.${this.position}[${this.repetition.index}]`;
                let segmentIndex = this.segment.index;
                if (segmentIndex < 0)
                    segmentIndex = this.message.segments.length;
                const err = new hl7_error_js_1.HL7Error(`The field (${location}) contained data of the wrong data type. ${e.message}.`, {
                    segmentType: this.segment.segmentType,
                    segmentSequence: segmentIndex,
                    fieldPosition: this.field.position,
                    componentPosition: this.position,
                    repetitionIndex: this.repetition.index,
                    hl7ErrorCode: 102,
                });
                err.stack = e.stack;
                throw err;
            }
            return;
        }
        else {
            this._subComponents = [];
            const subComponents = value.split(this.field.message.subComponentSeparator);
            let pos = 1;
            for (const subComponent of subComponents) {
                this.subcomp(pos++).fromHL7String(subComponent, options);
            }
        }
    }
    toHL7String(options) {
        let str;
        if (this._data) {
            let v = this._data.value;
            if (v === null)
                return '""';
            if (v === undefined)
                return '';
            const encode = this.definition.encode || this.typeDef.encode;
            if (encode) {
                try {
                    v = encode(v);
                }
                catch {
                    v = v == null ? v : String(v);
                }
            }
            else {
                if (typeof v === 'object' && v instanceof Date)
                    v = (0, hl7v2_dictionary_1.toHL7DateTime)(v);
            }
            str = (0, hl7_escape_js_1.hl7Escape)(v, this.field.message);
        }
        else {
            const { subComponentSeparator } = this.segment.message;
            str = this._subComponents.map(subComponent => subComponent.toHL7String(options)).join(subComponentSeparator);
            while (str.endsWith(subComponentSeparator))
                str = str.substring(0, str.length - 1);
        }
        if (options?.serializeComponent)
            return String(options?.serializeComponent(this, str, options) || '');
        return str;
    }
    [Symbol.toStringTag]() {
        return this.toHL7String();
    }
}
exports.Hl7Component = Hl7Component;
