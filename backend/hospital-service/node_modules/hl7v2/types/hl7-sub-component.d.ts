import { HL7DataTypeDefinition, HL7FieldDefinition } from 'hl7v2-dictionary';
import type { Hl7Component } from './hl7-component.js';
import type { HL7Field } from './hl7-field.js';
import type { HL7Message } from './hl7-message.js';
import type { HL7Segment } from './hl7-segment.js';
export declare class Hl7SubComponent {
    protected _definition: HL7FieldDefinition;
    protected _typeDef: HL7DataTypeDefinition;
    readonly component: Hl7Component;
    readonly position: number;
    protected _value?: any;
    constructor(component: Hl7Component, position: number, def: HL7FieldDefinition);
    get message(): HL7Message;
    get segment(): HL7Segment;
    get field(): HL7Field;
    get definition(): HL7FieldDefinition;
    get typeDef(): HL7DataTypeDefinition;
    get value(): any | undefined;
    set value(value: any);
    isEmpty(): boolean;
    fromHL7String(value: string, options?: Hl7SubComponentParseOptions): void;
    toHL7String(options?: Hl7SubComponentSerializeOptions): string;
    [Symbol.toStringTag](): string;
}
export interface Hl7SubComponentParseOptions {
    strict?: boolean;
}
export interface Hl7SubComponentSerializeOptions {
    serializeSubComponent?: (subComponent: Hl7SubComponent, serializedString: string, options?: Hl7SubComponentSerializeOptions) => string;
}
