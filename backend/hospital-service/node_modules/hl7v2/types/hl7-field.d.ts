import { HL7DataTypeDefinition, HL7FieldDefinition } from 'hl7v2-dictionary';
import type { Hl7Component } from './hl7-component.js';
import type { HL7Message } from './hl7-message.js';
import { HL7Repetition, HL7RepetitionParseOptions, type HL7RepetitionSerializeOptions } from './hl7-repetition.js';
import type { HL7Segment } from './hl7-segment.js';
import { Hl7SubComponent } from './hl7-sub-component.js';
export declare class HL7Field {
    protected _repetitions: HL7Repetition[];
    protected _definition: HL7FieldDefinition;
    protected _typeDef: HL7DataTypeDefinition;
    readonly segment: HL7Segment;
    readonly position: number;
    constructor(segment: HL7Segment, position: number, def: HL7FieldDefinition);
    get message(): HL7Message;
    get definition(): HL7FieldDefinition;
    get typeDef(): HL7DataTypeDefinition;
    get isPrimitive(): boolean;
    get repetitions(): HL7Repetition[];
    add(): HL7Repetition;
    clear(): void;
    isEmpty(): boolean;
    repetition(repetitionIndex?: number): HL7Repetition;
    component(position: number): Hl7Component;
    subComponent(componentPos: number, subComponentPos: number): Hl7SubComponent;
    /**
     * Alias of .repetition()
     */
    rep(repetitionIndex?: number): HL7Repetition;
    /**
     * Alias of .component()
     */
    comp(position: number): Hl7Component;
    /**
     * Alias of .subComponent()
     */
    subcomp(componentPos: number, subComponentPos: number): Hl7SubComponent;
    getValue(component?: number, subComponent?: number): any;
    setValue(value: any, component?: number, subComponent?: number): any;
    fromHL7String(value: string, options?: Hl7FieldParseOptions): void;
    toHL7String(options?: Hl7FieldSerializeOptions): string;
    [Symbol.toStringTag](): string;
}
export interface Hl7FieldParseOptions extends HL7RepetitionParseOptions {
}
export interface Hl7FieldSerializeOptions extends HL7RepetitionSerializeOptions {
    serializeField?: (field: HL7Field, serializedString: string, options?: Hl7FieldSerializeOptions) => string;
}
