import { validator, } from '../../core/index.js';
const TIME_PATTERN = /^(\d{2}):?(\d{2})(?::?(\d{2})?(?:\.(\d{1,3}))?)?$/;
/**
 * Validates if value is a time formatted string
 * @validator isTime
 */
export function isTime(options) {
    return validator('isTime', (input, context, _this) => {
        if (input != null) {
            const coerce = options?.coerce ?? context.coerce;
            let str;
            if (input instanceof Date && coerce) {
                str =
                    String(input.getHours()).padStart(2, '0') +
                        ':' +
                        String(input.getMinutes()).padStart(2, '0') +
                        ':' +
                        String(input.getSeconds()).padStart(2, '0');
                if (input.getMilliseconds()) {
                    str += '.' + String(input.getMilliseconds()).padStart(3, '0');
                }
                return str;
            }
            else
                str = input;
            if (str && typeof str === 'string') {
                const m = TIME_PATTERN.exec(str);
                if (m) {
                    if (parseInt(m[1]) <= 23 &&
                        parseInt(m[2]) <= 59 &&
                        (!m[3] || parseInt(m[3]) <= 59)) {
                        if (!coerce)
                            return str;
                        let out = m[1];
                        if (m[2])
                            out += ':' + m[2];
                        if (m[3])
                            out += ':' + m[3];
                        if (m[4])
                            out += '.' + m[4];
                        return out;
                    }
                }
            }
        }
        context.fail(_this, `Value must be a valid Time`, input);
    }, options);
}
