"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const omit_undefined_js_1 = require("../helpers/omit-undefined.js");
const validation_error_js_1 = require("./validation-error.js");
const VARIABLE_REPLACE_PATTERN = /{{([^}]*)}}/g;
const OPTIONAL_VAR_PATTERN = /^([^?]+)(?:\||(.*))?$/;
class Context {
    constructor(options) {
        this.isRoot = true;
        this.errors = [];
        Object.assign(this, options);
    }
    fail(rule, message, value, details) {
        const issue = (0, omit_undefined_js_1.omitUndefined)({
            message: message instanceof Error ? message.message : String(message),
            rule: rule.id,
            root: this.root,
            location: this.location,
            context: this.context,
            property: this.property,
            index: this.index,
            label: this.label,
            value,
            ...details,
        });
        issue.value = value;
        if (this.onFail) {
            const x = this.onFail(issue, this);
            if (!x)
                return;
            if (typeof x === 'object')
                Object.assign(issue, x);
            else
                issue.message = String(x);
        }
        issue.message = ('' + issue.message).replace(VARIABLE_REPLACE_PATTERN, (x, g) => {
            const m = OPTIONAL_VAR_PATTERN.exec(g);
            if (!m)
                return x;
            const k = m[1];
            let v = issue[k];
            if (k === 'value') {
                const s = String(issue.value);
                return s.length < 30 ? s : s.substring(0, 30) + '..';
            }
            if (!v && k === 'label' && (this.location || this.property)) {
                v = '`' + (this.location || this.property) + '`';
            }
            if (v != null)
                return v;
            if (m[2])
                return m[2];
            return m[1] === 'label' ? 'Value' : x;
        });
        this.errors.push(issue);
        if (this.errors.length >= (this.maxErrors ?? Infinity)) {
            throw new validation_error_js_1.ValidationError(this.errors);
        }
    }
    extend(options) {
        const extended = {};
        if (options) {
            for (const [k, v] of Object.entries(options)) {
                if (v !== undefined)
                    extended[k] = v;
            }
        }
        extended.isRoot = false;
        Object.setPrototypeOf(extended, this);
        return extended;
    }
}
exports.Context = Context;
