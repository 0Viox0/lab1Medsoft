"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNull = isNull;
exports.isNotNull = isNotNull;
exports.isNullish = isNullish;
exports.isNotNullish = isNotNullish;
const index_js_1 = require("../../core/index.js");
/**
 * Validates if value is "null".
 * @validator isNull
 */
function isNull(options) {
    return (0, index_js_1.validator)('isNull', (input, context, _this) => {
        if (input === null)
            return input;
        context.fail(_this, `Value must be null`, input);
    }, options);
}
/**
 * Validates if value is not "null".
 * @validator isNotNull
 */
function isNotNull(options) {
    return (0, index_js_1.validator)('isNotNull', (input, context, _this) => {
        if (input !== null)
            return input;
        context.fail(_this, `{{label}} is null`, input);
    }, options);
}
/**
 * Validates if value is "null" or "undefined".
 * @validator isNullish
 */
function isNullish(options) {
    return (0, index_js_1.validator)('isNullish', (input, context, _this) => {
        if (input == null)
            return input;
        context.fail(_this, `{{label}} is not nullish`, input);
    }, options);
}
/**
 * Validates if value is not "null" nor "undefined".
 * @validator isNotNullish
 */
function isNotNullish(options) {
    return (0, index_js_1.validator)('isNotNullish', (input, context, _this) => {
        if (input != null)
            return input;
        if (input === null)
            context.fail(_this, `{{label}} is null`, input);
        else
            context.fail(_this, `{{label}} is undefined`, input);
    }, options);
}
