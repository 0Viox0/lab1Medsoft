"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lengthMax = exports.lengthMin = void 0;
exports.range = range;
exports.isGt = isGt;
exports.isGte = isGte;
exports.isLt = isLt;
exports.isLte = isLte;
const index_js_1 = require("../../core/index.js");
const all_of_js_1 = require("../utility-rules/all-of.js");
const get_length_js_1 = require("../utility-rules/get-length.js");
const pipe_js_1 = require("../utility-rules/pipe.js");
/**
 * Checks if value is between minValue and maxValue
 * @validator range
 */
function range(minValue, maxValue, options) {
    return (0, index_js_1.validator)('range', (input, context, _this) => {
        if ((typeof minValue === 'number' || typeof minValue === 'bigint') &&
            (typeof maxValue === 'number' || typeof maxValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input >= minValue &&
            input <= maxValue) {
            return input;
        }
        if (minValue instanceof Date &&
            maxValue instanceof Date &&
            input instanceof Date &&
            input >= minValue &&
            input <= maxValue) {
            return input;
        }
        if (typeof minValue === 'string' &&
            typeof maxValue === 'string' &&
            typeof input === 'string' &&
            input >= minValue &&
            input <= maxValue) {
            return input;
        }
        context.fail(_this, `Value must be between ${minValue} and ${maxValue}`, input);
    }, options);
}
/**
 * Checks if value is grater than "minValue"
 * @validator iGt
 */
function isGt(minValue, options) {
    return (0, index_js_1.validator)('isGt', (input, context, _this) => {
        if ((typeof minValue === 'number' || typeof minValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input > minValue) {
            return input;
        }
        if (minValue instanceof Date &&
            input instanceof Date &&
            input > minValue) {
            return input;
        }
        if (typeof minValue === 'string' &&
            typeof input === 'string' &&
            (input > minValue ||
                (options?.caseInsensitive &&
                    input.toLowerCase() > minValue.toLowerCase()))) {
            return input;
        }
        context.fail(_this, `Value must be greater than ${typeof minValue === 'string' ? `"${minValue}"` : minValue}`, input);
    }, options);
}
// *************************************************************
/**
 * Checks if value is grater than or equal to minValue
 * @validator isGte
 */
function isGte(minValue, options) {
    return (0, index_js_1.validator)('isGte', (input, context, _this) => {
        if ((typeof minValue === 'number' || typeof minValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input >= minValue) {
            return input;
        }
        if (minValue instanceof Date &&
            input instanceof Date &&
            input >= minValue) {
            return input;
        }
        if (typeof minValue === 'string' &&
            typeof input === 'string' &&
            (input >= minValue ||
                (options?.caseInsensitive &&
                    input.toLowerCase() >= minValue.toLowerCase()))) {
            return input;
        }
        context.fail(_this, `Value must be greater than or equal to ${typeof minValue === 'string' ? `"${minValue}"` : minValue}`, input);
    }, options);
}
// *************************************************************
/**
 * Checks if number value is lover than maxValue
 * @validator isLt
 */
function isLt(maxValue, options) {
    return (0, index_js_1.validator)('isLt', (input, context, _this) => {
        if ((typeof maxValue === 'number' || typeof maxValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input < maxValue) {
            return input;
        }
        if (maxValue instanceof Date &&
            input instanceof Date &&
            input < maxValue) {
            return input;
        }
        if (typeof maxValue === 'string' &&
            typeof input === 'string' &&
            (input < maxValue ||
                (options?.caseInsensitive &&
                    input.toLowerCase() < maxValue.toLowerCase()))) {
            return input;
        }
        context.fail(_this, `Value must be lover than ${typeof maxValue === 'string' ? `"${maxValue}"` : maxValue}`, input);
    }, options);
}
// *************************************************************
/**
 * Checks if value is lover than or equal to maxValue
 * @validator isLte
 */
function isLte(maxValue, options) {
    return (0, index_js_1.validator)('isLte', (input, context, _this) => {
        if ((typeof maxValue === 'number' || typeof maxValue === 'bigint') &&
            (typeof input === 'number' || typeof input === 'bigint') &&
            input <= maxValue) {
            return input;
        }
        if (maxValue instanceof Date &&
            input instanceof Date &&
            input <= maxValue) {
            return input;
        }
        if (typeof maxValue === 'string' &&
            typeof input === 'string' &&
            (input <= maxValue ||
                (options?.caseInsensitive &&
                    input.toLowerCase() <= maxValue.toLowerCase()))) {
            return input;
        }
        context.fail(_this, `Value must be lover than or equal to ${typeof maxValue === 'string' ? `"${maxValue}"` : maxValue}`, input);
    }, options);
}
/**
 * Checks the length is at least "minValue"
 * @validator lengthMin
 */
const lengthMin = (minValue) => (0, all_of_js_1.allOf)([
    (0, pipe_js_1.pipe)([
        (0, get_length_js_1.getLength)(),
        isGte(minValue, {
            onFail: () => `Value length must be at least ${minValue}`,
        }),
    ]),
]);
exports.lengthMin = lengthMin;
/**
 * Checks if the length is at most "maxValue"
 * @validator lengthMax
 */
const lengthMax = (maxValue) => (0, all_of_js_1.allOf)([
    (0, pipe_js_1.pipe)([
        (0, get_length_js_1.getLength)(),
        isLte(maxValue, {
            onFail: () => `The length of {{label}} must be at most ${maxValue}`,
        }),
    ]),
]);
exports.lengthMax = lengthMax;
