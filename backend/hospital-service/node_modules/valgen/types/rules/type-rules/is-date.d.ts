import { type ValidationOptions } from '../../core/index.js';
type Precision = 'year' | 'yr' | 'month' | 'mo' | 'day' | 'd' | 'hours' | 'hr' | 'minutes' | 'min' | 'seconds' | 'sec' | 'milliseconds' | 'ms' | 'tz';
export interface IsDateOptions extends ValidationOptions {
    trim?: Precision;
}
/**
 * Validates if value is a "Date" instance or ISO 8601 formatted date string.
 *  if a `coerce` option is `true`, converts input value to Date instance
 * @validator isDate
 */
export declare function isDate(options?: IsDateOptions): import("../../core/validator.js").Validator<Date, string | number | Date, import("../../core/types.js").ExecutionOptions>;
export interface IsDateStringOptions extends ValidationOptions {
    precisionMin?: Precision;
    precisionMax?: Precision;
    trim?: Precision;
}
/**
 * Validates if value is DFS (date formatted string).
 * Converts input value to DFS if the "coerce" option is set to 'true'.
 * @validator isDateString
 */
export declare function isDateString(options?: IsDateStringOptions): import("../../core/validator.js").Validator<string, string | number | Date, import("../../core/types.js").ExecutionOptions>;
export {};
