"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncEventEmitter = void 0;
const tslib_1 = require("tslib");
const events_1 = require("events");
const putil_promisify_1 = tslib_1.__importDefault(require("putil-promisify"));
class AsyncEventEmitter extends events_1.EventEmitter {
    constructor() {
        super();
        /** Prevents throwing error while emitting error event */
        this.on('error', (() => undefined));
    }
    /**
     * Asynchronously calls each of the listeners registered for the event named `eventName`,
     * in the order they were registered, passing the supplied arguments to each.
     * @param event
     * @param args
     */
    async emitAsync(event, ...args) {
        const listeners = this.rawListeners(event);
        if (!listeners.length)
            return false;
        const promises = listeners.reduce((a, fn) => {
            const x = fn(...args);
            if (putil_promisify_1.default.isPromise(x))
                a.push(x);
            return a;
        }, []);
        return Promise.all(promises).then(() => true);
    }
    /**
     * In a serial order, asynchronously calls each of the listeners registered for the event named `eventName`,
     * in the order they were registered, passing the supplied arguments to each.
     * @param event
     * @param args
     */
    async emitAsyncSerial(event, ...args) {
        const listeners = this.rawListeners(event);
        if (!listeners.length)
            return false;
        for (const listener of listeners) {
            if (await listener(...args))
                break;
        }
        return true;
    }
}
exports.AsyncEventEmitter = AsyncEventEmitter;
