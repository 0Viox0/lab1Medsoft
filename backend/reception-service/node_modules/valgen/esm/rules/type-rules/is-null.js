import { validator, } from '../../core/index.js';
/**
 * Validates if value is "null".
 * @validator isNull
 */
export function isNull(options) {
    return validator('isNull', (input, context, _this) => {
        if (input === null)
            return input;
        context.fail(_this, `Value must be null`, input);
    }, options);
}
/**
 * Validates if value is not "null".
 * @validator isNotNull
 */
export function isNotNull(options) {
    return validator('isNotNull', (input, context, _this) => {
        if (input !== null)
            return input;
        context.fail(_this, `{{label}} is null`, input);
    }, options);
}
/**
 * Validates if value is "null" or "undefined".
 * @validator isNullish
 */
export function isNullish(options) {
    return validator('isNullish', (input, context, _this) => {
        if (input == null)
            return input;
        context.fail(_this, `{{label}} is not nullish`, input);
    }, options);
}
/**
 * Validates if value is not "null" nor "undefined".
 * @validator isNotNullish
 */
export function isNotNullish(options) {
    return validator('isNotNullish', (input, context, _this) => {
        if (input != null)
            return input;
        if (input === null)
            context.fail(_this, `{{label}} is null`, input);
        else
            context.fail(_this, `{{label}} is undefined`, input);
    }, options);
}
