import { validator, } from '../../core/index.js';
/**
 * Validates if value is "array" and applies validation for each item.
 * Converts input value to array if coerce option is set to 'true'.
 * @validator isArray
 */
export function isArray(itemValidator, options) {
    return validator('isArray', (input, context, _this) => {
        const coerce = options?.coerce ?? context.coerce;
        let output = input;
        if (output != null && coerce && !Array.isArray(output))
            output = [output];
        if (!Array.isArray(output)) {
            context.fail(_this, `Value must be an array`, input);
            return;
        }
        if (!itemValidator)
            return output;
        // const location = context.location || '';
        const itemContext = context.extend();
        let i;
        let v;
        const l = output.length;
        const out = [];
        for (i = 0; i < l; i++) {
            v = output[i];
            itemContext.scope = output;
            // itemContext.location = location + '[' + i + ']';
            itemContext.location = context.location
                ? context.location + `[${i}]`
                : `<Array>[${i}]`;
            itemContext.index = i;
            v = itemValidator(v, {
                onFail(issue) {
                    return `Item at index [${i}] is not valid. ` + issue.message;
                },
            }, itemContext);
            out.push(v);
        }
        return out;
    }, options);
}
