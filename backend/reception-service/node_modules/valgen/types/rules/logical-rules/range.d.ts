import { type ValidationOptions, type Validator } from '../../core/index.js';
type RangeInput = number | bigint | Date | string;
/**
 * Checks if value is between minValue and maxValue
 * @validator range
 */
export declare function range<T extends RangeInput>(minValue: T, maxValue: T, options?: ValidationOptions): Validator<T, T, import("../../core/types.js").ExecutionOptions>;
/**
 * Checks if value is grater than "minValue"
 * @validator iGt
 */
export declare function isGt<T extends RangeInput>(minValue: T, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator;
/**
 * Checks if value is grater than or equal to minValue
 * @validator isGte
 */
export declare function isGte<T extends RangeInput>(minValue: T, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator<T, T>;
/**
 * Checks if number value is lover than maxValue
 * @validator isLt
 */
export declare function isLt<T extends RangeInput>(maxValue: T, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator;
/**
 * Checks if value is lover than or equal to maxValue
 * @validator isLte
 */
export declare function isLte<T extends RangeInput>(maxValue: T, options?: ValidationOptions & {
    caseInsensitive?: boolean;
}): Validator;
/**
 * Checks the length is at least "minValue"
 * @validator lengthMin
 */
export declare const lengthMin: (minValue: number) => Validator<any, any, import("../../core/types.js").ExecutionOptions>;
/**
 * Checks if the length is at most "maxValue"
 * @validator lengthMax
 */
export declare const lengthMax: (maxValue: number) => Validator<any, any, import("../../core/types.js").ExecutionOptions>;
export {};
