import { type ValidationOptions } from '../../core/index.js';
export interface IsEmailOptions extends ValidationOptions {
    /**
     * If set to `true`, the validator will also match `Display Name <email-address>`.
     *
     * @default false
     */
    allowDisplayName?: boolean;
    /**
     * If set to `true`, the validator will reject strings without the format `Display Name <email-address>`.
     *
     * @default false
     */
    requireDisplayName?: boolean;
    /**
     * If set to `false`, the validator will not allow any non-English UTF8 character in email address' local part.
     *
     * @default true
     */
    utf8LocalPart?: boolean;
    /**
     * If set to `true`, the validator will not check for the standard max length of an email.
     *
     * @default false
     */
    ignoreMaxLength?: boolean;
    /**
     * If set to `true`, the validator will allow IP addresses in the host part.
     *
     * @default false
     */
    allowIpDomain?: boolean;
    /**
     * If set to `true`, some additional validation will be enabled,
     * e.g. disallowing certain syntactically valid email addresses that are rejected by GMail.
     *
     * @default false
     */
    domainSpecificValidation?: boolean;
    /**
     *  If set to an array of strings and the part of the email after
     *  the @ symbol matches one of the strings defined in it,
     *  the validation fails.
     */
    hostBlacklist?: string[];
    /**
     * If set to an array of strings and the part of the email after
     * the @ symbol matches none of the strings defined in it,
     * the validation fails.
     */
    hostWhitelist?: string[];
    /**
     *  If set to a string, then the validator will reject emails that include
     *  any of the characters in the string, in the name part.
     */
    blacklistedChars?: string;
}
/**
 * Validates if value is a valid Email
 * @validator isEmail
 */
export declare function isEmail(options?: IsEmailOptions): import("../../core/validator.js").Validator<string, string, import("../../core/types.js").ExecutionOptions>;
