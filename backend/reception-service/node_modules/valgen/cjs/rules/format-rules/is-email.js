"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEmail = isEmail;
const tslib_1 = require("tslib");
const validator_1 = tslib_1.__importDefault(require("@browsery/validator"));
const index_js_1 = require("../../core/index.js");
/**
 * Validates if value is a valid Email
 * @validator isEmail
 */
function isEmail(options) {
    const emailOptions = {
        allow_display_name: true,
        allow_utf8_local_part: options?.utf8LocalPart,
        ignore_max_length: true,
        allow_ip_domain: options?.allowIpDomain,
    };
    return (0, index_js_1.validator)('isEmail', (input, context, _this) => {
        if (typeof input === 'string' &&
            validator_1.default.isEmail(input, emailOptions)) {
            if (options?.requireDisplayName) {
                if (!validator_1.default.isEmail(input, {
                    ...emailOptions,
                    require_display_name: true,
                })) {
                    context.fail(_this, `Display name for the email is required. Etc. ( Name <me@tempuri.org> ) `, input);
                    return;
                }
            }
            else if (!options?.allowDisplayName &&
                !validator_1.default.isEmail(input, {
                    ...emailOptions,
                    allow_display_name: false,
                })) {
                context.fail(_this, `Display name in email is not allowed`, input);
                return;
            }
            if (options?.hostBlacklist &&
                !validator_1.default.isEmail(input, {
                    ...emailOptions,
                    host_blacklist: options.hostBlacklist,
                })) {
                context.fail(_this, `Email "{{value}}" is in black-list`, input);
                return;
            }
            if (options?.hostWhitelist &&
                !validator_1.default.isEmail(input, {
                    ...emailOptions,
                    host_whitelist: options.hostWhitelist,
                })) {
                context.fail(_this, `Email "{{value}}" is in not white-list`, input);
                return;
            }
            if (options?.blacklistedChars &&
                !validator_1.default.isEmail(input, {
                    ...emailOptions,
                    blacklisted_chars: options.blacklistedChars,
                })) {
                context.fail(_this, `Black listed characters (${options.blacklistedChars}) found in name part`, input);
                return;
            }
            return input;
        }
        context.fail(_this, `Value must much required e-mail format`, input);
    }, options);
}
