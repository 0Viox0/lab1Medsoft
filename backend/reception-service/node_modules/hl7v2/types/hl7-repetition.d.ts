import { Hl7Component, Hl7ComponentParseOptions, type Hl7ComponentSerializeOptions } from './hl7-component.js';
import type { HL7Field } from './hl7-field.js';
import type { HL7Message } from './hl7-message.js';
import type { HL7Segment } from './hl7-segment.js';
import { Hl7SubComponent } from './hl7-sub-component.js';
export declare class HL7Repetition {
    protected _components: Hl7Component[];
    readonly field: HL7Field;
    constructor(field: HL7Field);
    get message(): HL7Message;
    get segment(): HL7Segment;
    get components(): Hl7Component[] | undefined;
    get index(): number;
    clear(): void;
    isEmpty(): boolean;
    /**
     *
     */
    component(position?: number): Hl7Component;
    subComponent(componentPos: number, subComponentPos: number): Hl7SubComponent;
    /**
     * Alias of .component()
     */
    comp(position: number): Hl7Component;
    /**
     * Alias of .subComponent()
     */
    subcomp(componentPos: number, subComponentPos: number): Hl7SubComponent;
    getValue(component?: number, subComponent?: number): any;
    setValue(value: any, component?: number, subComponent?: number): this;
    fromHL7String(value: string, options?: HL7RepetitionParseOptions): void;
    toHL7String(options?: HL7RepetitionSerializeOptions): string;
    [Symbol.toStringTag](): string;
}
export interface HL7RepetitionParseOptions extends Hl7ComponentParseOptions {
}
export interface HL7RepetitionSerializeOptions extends Hl7ComponentSerializeOptions {
}
