import { HL7FieldDefinition, HL7SegmentDefinition } from 'hl7v2-dictionary';
import { HL7Field, Hl7FieldParseOptions, Hl7FieldSerializeOptions } from './hl7-field.js';
import type { HL7Message } from './hl7-message.js';
export declare class HL7Segment {
    protected _fields: HL7Field[];
    protected _definition: HL7SegmentDefinition;
    message: HL7Message;
    segmentType: string;
    constructor(message: HL7Message, segmentType: string);
    get definition(): HL7SegmentDefinition;
    get fields(): HL7Field[];
    get index(): number;
    clear(): void;
    field(fieldPos: number): HL7Field;
    defineField(position: number, def: HL7FieldDefinition): HL7Field;
    toHL7String(options?: Hl7SegmentSerializeOptions): string;
    static parse(message: HL7Message, input: string, options?: Hl7SegmentParseOptions): HL7Segment;
}
export interface Hl7SegmentParseOptions extends Hl7FieldParseOptions {
}
export interface Hl7SegmentSerializeOptions extends Hl7FieldSerializeOptions {
    serializeSegment?: (segment: HL7Segment, serializedString: string, options?: Hl7FieldSerializeOptions) => string;
}
