import { AcknowledgmentCode, HL7Dictionary, HL7Version } from 'hl7v2-dictionary';
import { HL7MessageNode } from './hl7-message-node.js';
import { HL7Segment, Hl7SegmentParseOptions, Hl7SegmentSerializeOptions } from './hl7-segment.js';
export declare class HL7Message {
    private readonly _dictionaries;
    protected _segments: HL7Segment[];
    protected _dictionary: HL7Dictionary;
    protected _version: HL7Version;
    fieldSeparator: string;
    componentSeparator: string;
    subComponentSeparator: string;
    repetitionSeparator: string;
    escapeCharacter: string;
    constructor(version?: HL7Version, dictionaries?: Record<string, HL7Dictionary>);
    get dictionary(): HL7Dictionary;
    get segments(): HL7Segment[];
    get header(): HL7Segment;
    get version(): HL7Version;
    get messageType(): string;
    get controlId(): string;
    clear(version?: HL7Version): void;
    addSegment(segmentType: string, index?: number): HL7Segment;
    /**
     * Searches for a segment of a given type
     */
    getSegment(segmentType: string, indexOrAfter?: number | HL7Segment): HL7Segment | undefined;
    /**
     * Searches for a segment of a given type in reverse order
     */
    getSegmentFromLast(segmentType: string, indexOrAfter?: number | HL7Segment): HL7Segment | undefined;
    toHL7String(options?: HL7MessageSerializeOptions): string;
    parse(input: string | Buffer, options?: HL7MessageParseOptions): void;
    buildStructureTree(): HL7MessageNode;
    createAck(ackCode?: AcknowledgmentCode, textMessage?: string): HL7Message;
    createNak(errors: (Error | string)[]): HL7Message;
    addError(error: Error | string): void;
    protected _clear(version?: HL7Version): void;
    /**
     *
     * @static
     */
    static parse(input: string | Buffer, options?: HL7MessageParseOptions): HL7Message;
    /**
     *
     * @static
     */
    static parseRaw(input: string | Buffer): {
        header: string;
        fieldSeparator: string;
        componentSeparator: string;
        repetitionSeparator: string;
        escapeCharacter: string;
        subComponentSeparator: string;
        encoding: string;
        version: HL7Version;
        messageType: string;
        data: string;
    };
    static readonly encodingMapping: {
        ASCII: string;
        '8859/1': string;
        '8859/2': string;
        '8859/3': string;
        '8859/4': string;
        '8859/5': string;
        '8859/6': string;
        '8859/7': string;
        '8859/8': string;
        '8859/9': string;
        '8859/15': string;
        'ISO IR6': string;
        'ISO IR14': string;
        'ISO IR87': string;
        'ISO IR159': string;
        'GB 18030-2000': string;
        'KS X 1001': string;
        'CNS 11643-1992': string;
        'BIG-5': string;
        UNICODE: string;
        'UNICODE UTF-8': string;
        'UNICODE UTF-16': string;
    };
}
export interface HL7MessageParseOptions extends Hl7SegmentParseOptions {
    dictionaries?: Record<string, HL7Dictionary>;
}
export interface HL7MessageSerializeOptions extends Hl7SegmentSerializeOptions {
}
