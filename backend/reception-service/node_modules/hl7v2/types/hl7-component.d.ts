import { HL7DataTypeDefinition, HL7FieldDefinition } from 'hl7v2-dictionary';
import type { HL7Field } from './hl7-field.js';
import type { HL7Message } from './hl7-message.js';
import type { HL7Repetition } from './hl7-repetition.js';
import type { HL7Segment } from './hl7-segment.js';
import { Hl7SubComponent, Hl7SubComponentParseOptions, type Hl7SubComponentSerializeOptions } from './hl7-sub-component.js';
export declare class Hl7Component {
    protected _subComponents?: Hl7SubComponent[];
    protected _data?: Hl7SubComponent;
    protected _definition: HL7FieldDefinition;
    protected _typeDef: HL7DataTypeDefinition;
    readonly repetition: HL7Repetition;
    readonly position: number;
    constructor(repetition: HL7Repetition, position: number, def: HL7FieldDefinition);
    get message(): HL7Message;
    get segment(): HL7Segment;
    get field(): HL7Field;
    get definition(): HL7FieldDefinition;
    get typeDef(): HL7DataTypeDefinition;
    get isPrimitive(): boolean;
    get subComponents(): Hl7SubComponent[] | undefined;
    clear(): void;
    isEmpty(): boolean;
    subcomp(position: number): Hl7SubComponent;
    getValue(subComponent?: number): any | undefined;
    setValue(value: any, subComponent?: number): this;
    fromHL7String(value: string, options?: Hl7ComponentParseOptions): void;
    toHL7String(options?: Hl7ComponentSerializeOptions): any;
    [Symbol.toStringTag](): any;
}
export interface Hl7ComponentParseOptions extends Hl7SubComponentParseOptions {
}
export interface Hl7ComponentSerializeOptions extends Hl7SubComponentSerializeOptions {
    serializeComponent?: (component: Hl7Component, serializedString: string, options?: Hl7ComponentSerializeOptions) => string;
}
