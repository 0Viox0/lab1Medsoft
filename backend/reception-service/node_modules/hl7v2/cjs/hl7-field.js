"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HL7Field = void 0;
const hl7_repetition_js_1 = require("./hl7-repetition.js");
class HL7Field {
    constructor(segment, position, def) {
        this.segment = segment;
        this.position = position;
        this._definition = def;
        this._typeDef = this.message.dictionary.types[this._definition.type];
        if (!this._typeDef)
            throw new Error(`Unknown data type: ${this._definition.type}`);
        this.clear();
    }
    get message() {
        return this.segment.message;
    }
    get definition() {
        return this._definition;
    }
    get typeDef() {
        return this._typeDef;
    }
    get isPrimitive() {
        return !this.typeDef.fields;
    }
    get repetitions() {
        return this._repetitions;
    }
    add() {
        const rep = new hl7_repetition_js_1.HL7Repetition(this);
        this._repetitions.push(rep);
        return rep;
    }
    clear() {
        this._repetitions = [];
    }
    isEmpty() {
        for (const rep of this._repetitions) {
            if (!rep.isEmpty())
                return false;
        }
        return true;
    }
    repetition(repetitionIndex = 0) {
        while (repetitionIndex >= this._repetitions.length)
            this.add();
        return this._repetitions[repetitionIndex];
    }
    component(position) {
        return this.repetition(0).comp(position);
    }
    subComponent(componentPos, subComponentPos) {
        return this.repetition(0).comp(componentPos).subcomp(subComponentPos);
    }
    /**
     * Alias of .repetition()
     */
    rep(repetitionIndex = 0) {
        return this.repetition(repetitionIndex);
    }
    /**
     * Alias of .component()
     */
    comp(position) {
        return this.component(position);
    }
    /**
     * Alias of .subComponent()
     */
    subcomp(componentPos, subComponentPos) {
        return this.subComponent(componentPos, subComponentPos);
    }
    getValue(component, subComponent) {
        return this._repetitions[0]?.getValue(component, subComponent);
    }
    setValue(value, component, subComponent) {
        return this.repetition(0).setValue(value, component, subComponent);
    }
    fromHL7String(value, options) {
        const components = value.split(this.message.repetitionSeparator);
        this._repetitions = [];
        for (const cmp of components) {
            this.add().fromHL7String(cmp, options);
        }
    }
    toHL7String(options) {
        if (!this._repetitions.length)
            return '';
        const { repetitionSeparator } = this.segment.message;
        let str = this._repetitions
            .map(component => component.toHL7String(options))
            .join(repetitionSeparator);
        while (str.endsWith(repetitionSeparator))
            str = str.substring(0, str.length - 1);
        if (options?.serializeField) {
            return options.serializeField(this, str, options) || '';
        }
        return str;
    }
    [Symbol.toStringTag]() {
        return this.toHL7String();
    }
}
exports.HL7Field = HL7Field;
